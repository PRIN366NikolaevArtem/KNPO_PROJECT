.TH "Проект/KNPO_PrIn_266_Nikolaev/StringUnpacker/implementation.cpp" 3 "Mon Dec 27 2021" "StringUnpacker" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Проект/KNPO_PrIn_266_Nikolaev/StringUnpacker/implementation.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'header\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "std::string \fBStringProcessing\fP (const std::string_view inputData)"
.br
.RI "Распаковать строку "
.ti -1c
.RI "auto \fBFillUnitArray\fP (std::string_view::const_iterator &currentIterator, const std::string_view &inputData, std::vector< \fBUnit\fP > &arrayOfCharacters)"
.br
.RI "Сформировать модуль и записать его в массив "
.ti -1c
.RI "std::vector< \fBUnit\fP > \fBDivideStringToChars\fP (const std::string_view inputData)"
.br
.RI "Разделить строку на модули "
.ti -1c
.RI "\fBTermError\fP \fBLateEvaluation\fP (const std::string_view inputData)"
.br
.RI "Проверить содержимое строки на корректность "
.ti -1c
.RI "std::vector< std::string > \fBDivideString\fP (const std::string_view inputData, const int border)"
.br
.RI "Разбить распакованную строку на массив строк по заданной длине "
.in -1c
.SH "Function Documentation"
.PP 
.SS "std::vector<std::string> DivideString (const std::string_view inputData, const int border)"

.PP
Разбить распакованную строку на массив строк по заданной длине 
.PP
\fBParameters\fP
.RS 4
\fIinputData\fP распакованная строка 
.br
\fIborder\fP ограничитель длины строки
.RE
.PP
\fBReturns\fP
.RS 4
массив строк по заданной длине 
.RE
.PP
Вернуть пустой массив, если лимит меньше либо равен 0
.PP
Создать результирующий массив строк
.PP
Для каждой группы символов, длина которой равна лимиту
.PP
Создать строку из текущей группы символов
.PP
/Добавить строку в результирующий массив
.PP
Добавить группу символов в результирующий массив, если она находится конце строки и ее длина меньше лимита
.PP
Вернуть результирующий массив
.SS "std::vector<\fBUnit\fP> DivideStringToChars (const std::string_view inputData)"

.PP
Разделить строку на модули 
.PP
\fBParameters\fP
.RS 4
\fIinputData\fP входная строка
.RE
.PP
\fBReturns\fP
.RS 4
массив модулей 
.RE
.PP
Создать массив, в который будем сохранять модули
.PP
Для каждого символа строки
.PP
Если текущий символ – буква
.PP
Добавить в массив модуль с текущим символом и количеством символов равным 1
.PP
Перейти к следующей итерации
.PP
Сформировать модуль и записать его в массив
.PP
Вернуть получившийся массив модулей
.SS "auto FillUnitArray (std::string_view::const_iterator & currentIterator, const std::string_view & inputData, std::vector< \fBUnit\fP > & arrayOfCharacters)"

.PP
Сформировать модуль и записать его в массив 
.PP
\fBParameters\fP
.RS 4
\fI[in|out]\fP currentIterator ссылка на текущий символ, на котором остановился итератор 
.br
\fI[in|out]\fP inputData ссылка на текущий символ, на котором остановился итератор 
.br
\fI[in|out]\fP arrayOfCharacters ссылка на текущий символ, на котором остановился итератор
.RE
.PP
\fBReturns\fP
.RS 4
текущий символ, на котором остановился итератор 
.RE
.PP
Начало числа повторений – текущий символ
.PP
Найти первый нецифровой символ – это запоследний символ числа повторений, а также повторяемая буква
.PP
Конвертировать строку с числом повторением в число
.PP
Если число повторений не входит в разрешенный диапазон – выдать ошибку
.PP
Добавить в массив модуль с вычисленным числом повторений и повторяемой буквой
.PP
Считать текущим символом следующий символ после повторяемой буквы
.SS "\fBTermError\fP LateEvaluation (const std::string_view inputData)"

.PP
Проверить содержимое строки на корректность 
.PP
\fBParameters\fP
.RS 4
\fIinputData\fP входная строка
.RE
.PP
\fBReturns\fP
.RS 4
код ошибки 
.RE
.PP
Вернуть код ошибки типа 'некорректный символ', если найден символ, который не является заглавной латинской буквой или цифрой
.PP
Вернуть код ошибки типа 'последняя цифра', если последний символ является цифрой
.PP
Вернуть код без ошибки
.SS "std::string StringProcessing (const std::string_view inputData)"

.PP
Распаковать строку 
.PP
\fBParameters\fP
.RS 4
\fIinputData\fP входная строка
.RE
.PP
\fBReturns\fP
.RS 4
распакованная строка 
.RE
.PP
Выдать ошибку, если размер строки не соответствует разрешенному диапазону
.PP
Выдать ошибку, если содержимое строки не корректно
.PP
Разделить строку на модули\&.\&.\&.
.PP
Перевести модули в распакованную строку\&.\&.\&.
.PP
Для каждого модуля
.PP
Вернуть распакованную строку
.SH "Author"
.PP 
Generated automatically by Doxygen for StringUnpacker from the source code\&.
